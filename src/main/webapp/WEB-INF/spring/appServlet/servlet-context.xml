<?xml version="1.0" encoding="UTF-8"?>
<!-- 이 파일은 !!dd에 설정된 매핑 명령어로!! 요청이 올 시, DispatcherServlet이 생성되면서 읽어들이는 파일이다
url-pattern에 .do를 설정해놓고 .do로 접근하지 않았기 때문에 이 파일이 인스턴스화 될 일이 없었던 것 -->

<beans:beans
	xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	<!-- DispatcherServelt 컨텍스트 : 이 서블릿의 요청 처리 인프라를 정의합니다  -->
	
	
	<!-- 서비스 빈들 일단 어노테이션 제거하고 WebContainer 에 추가했다 -->
	<!-- import하면 결국 하나의 컨테이너에 포함되는 거겠지? -->
	<beans:import resource="services.xml"/>


	<!-- Enables the Spring MVC @Controller programming model -->
	<!-- 스프링 MVC @Controller 프로그래밍 모델을 활성화합니다..? -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources in the ${webappRoot}/resources directory -->
	<!-- ${webappRoot}/resources 디렉토리의 정적 자원을 효율적으로 제공 하여
		 /resource/** 에 대한 GET 요청을 처리합니다 -->
	<!-- 기억이 가물가물하지만, ${webappRoot} 뒤에 쓸 내용을 줄여주는 개념이었던것 같다 -->
	<resources mapping="/resources/**" location="/resources/" />
	<resources mapping="/css/**" location="/resources/css/" />
	<resources mapping="/js/**" location="/resources/js/" />
	<resources mapping="/sources/**" location="/resources/sources/" />

	<!-- beans:bean 태그에 prefix, suffix 프로퍼티 지정
	mapping 명령어에 자동으로 "/WEB-INF/views/", ".jsp" 추가
	subString 해서 짜르던 부분을 스프링에서는 이렇게 편하게..!-->
	<beans:bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>

	<!-- 요청이 오면 DispatcherServlet은 이 문서를 참조하여 컨테이너 객체를 생성한다
		컨테이너는 이 문서에 설정된 경로의 component들을 모두 스캔하여 로딩한다
		지금은 모든 패키지의 Bean을 다 로딩하지만, 규모가 커지면 서블릿별로 나눠야 할것 같다 -->
	<context:component-scan
		base-package="com.yura.yoj" />



</beans:beans>
